paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: User.upsert__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: User.upsert__patch_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: User.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'User.prototype.updateAttributes__put_Users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'User.prototype.updateAttributes__patch_Users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: User.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)



            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with email verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Messages/greet:
    get:
      tags:
        - Message
      operationId: Message.greet
      parameters:
        - name: msg
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              greeting:
                type: string
      deprecated: false
  '/mockups/{id}/mockupItems/{fk}':
    get:
      tags:
        - mockup
      summary: Find a related item by id for mockupItems.
      operationId: mockup.prototype.__findById__mockupItems
      parameters:
        - name: fk
          in: path
          description: Foreign key for mockupItems
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
    delete:
      tags:
        - mockup
      summary: Delete a related item by id for mockupItems.
      operationId: mockup.prototype.__destroyById__mockupItems
      parameters:
        - name: fk
          in: path
          description: Foreign key for mockupItems
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - mockup
      summary: Update a related item by id for mockupItems.
      operationId: mockup.prototype.__updateById__mockupItems
      parameters:
        - name: fk
          in: path
          description: Foreign key for mockupItems
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MockupItem'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
  '/mockups/{id}/mockupItems':
    get:
      tags:
        - mockup
      summary: Queries mockupItems of mockup.
      operationId: mockup.prototype.__get__mockupItems
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MockupItem'
      deprecated: false
    post:
      tags:
        - mockup
      summary: Creates a new instance in mockupItems of this model.
      operationId: mockup.prototype.__create__mockupItems
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MockupItem'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
    delete:
      tags:
        - mockup
      summary: Deletes all mockupItems of this model.
      operationId: mockup.prototype.__delete__mockupItems
      parameters:
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/mockups/{id}/mockupItems/count':
    get:
      tags:
        - mockup
      summary: Counts mockupItems of mockup.
      operationId: mockup.prototype.__count__mockupItems
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /mockups:
    post:
      tags:
        - mockup
      summary: Create a new instance of the model and persist it into the data source.
      operationId: mockup.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mockup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
    put:
      tags:
        - mockup
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: mockup.upsert__put_mockups
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mockup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
    patch:
      tags:
        - mockup
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: mockup.upsert__patch_mockups
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mockup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
    get:
      tags:
        - mockup
      summary: Find all instances of the model matched by filter from the data source.
      operationId: mockup.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/mockup'
      deprecated: false
  /mockups/replaceOrCreate:
    post:
      tags:
        - mockup
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: mockup.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mockup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
  /mockups/upsertWithWhere:
    post:
      tags:
        - mockup
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: mockup.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mockup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
  '/mockups/{id}/exists':
    get:
      tags:
        - mockup
      summary: Check whether a model instance exists in the data source.
      operationId: 'mockup.exists__get_mockups_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/mockups/{id}':
    head:
      tags:
        - mockup
      summary: Check whether a model instance exists in the data source.
      operationId: 'mockup.exists__head_mockups_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - mockup
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: mockup.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
    delete:
      tags:
        - mockup
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: mockup.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - mockup
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'mockup.prototype.updateAttributes__put_mockups_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mockup'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
    patch:
      tags:
        - mockup
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'mockup.prototype.updateAttributes__patch_mockups_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mockup'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
  '/mockups/{id}/replace':
    post:
      tags:
        - mockup
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: mockup.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mockup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
  /mockups/findOne:
    get:
      tags:
        - mockup
      summary: Find first instance of the model matched by filter from the data source.
      operationId: mockup.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
  /mockups/update:
    post:
      tags:
        - mockup
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: mockup.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mockup'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /mockups/count:
    get:
      tags:
        - mockup
      summary: Count instances of the model matched by where from the data source.
      operationId: mockup.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/projects/{id}/mockups/{fk}':
    get:
      tags:
        - project
      summary: Find a related item by id for mockups.
      operationId: project.prototype.__findById__mockups
      parameters:
        - name: fk
          in: path
          description: Foreign key for mockups
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
    delete:
      tags:
        - project
      summary: Delete a related item by id for mockups.
      operationId: project.prototype.__destroyById__mockups
      parameters:
        - name: fk
          in: path
          description: Foreign key for mockups
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - project
      summary: Update a related item by id for mockups.
      operationId: project.prototype.__updateById__mockups
      parameters:
        - name: fk
          in: path
          description: Foreign key for mockups
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/mockup'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
  '/projects/{id}/mockups':
    get:
      tags:
        - project
      summary: Queries mockups of project.
      operationId: project.prototype.__get__mockups
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/mockup'
      deprecated: false
    post:
      tags:
        - project
      summary: Creates a new instance in mockups of this model.
      operationId: project.prototype.__create__mockups
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/mockup'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mockup'
      deprecated: false
    delete:
      tags:
        - project
      summary: Deletes all mockups of this model.
      operationId: project.prototype.__delete__mockups
      parameters:
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/projects/{id}/mockups/count':
    get:
      tags:
        - project
      summary: Counts mockups of project.
      operationId: project.prototype.__count__mockups
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /projects:
    post:
      tags:
        - project
      summary: Create a new instance of the model and persist it into the data source.
      operationId: project.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/project'
      deprecated: false
    put:
      tags:
        - project
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: project.upsert__put_projects
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/project'
      deprecated: false
    patch:
      tags:
        - project
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: project.upsert__patch_projects
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/project'
      deprecated: false
    get:
      tags:
        - project
      summary: Find all instances of the model matched by filter from the data source.
      operationId: project.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/project'
      deprecated: false
  /projects/replaceOrCreate:
    post:
      tags:
        - project
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: project.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/project'
      deprecated: false
  /projects/upsertWithWhere:
    post:
      tags:
        - project
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: project.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/project'
      deprecated: false
  '/projects/{id}/exists':
    get:
      tags:
        - project
      summary: Check whether a model instance exists in the data source.
      operationId: 'project.exists__get_projects_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/projects/{id}':
    head:
      tags:
        - project
      summary: Check whether a model instance exists in the data source.
      operationId: 'project.exists__head_projects_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - project
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: project.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/project'
      deprecated: false
    delete:
      tags:
        - project
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: project.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - project
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'project.prototype.updateAttributes__put_projects_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/project'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/project'
      deprecated: false
    patch:
      tags:
        - project
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'project.prototype.updateAttributes__patch_projects_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/project'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/project'
      deprecated: false
  '/projects/{id}/replace':
    post:
      tags:
        - project
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: project.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/project'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/project'
      deprecated: false
  /projects/findOne:
    get:
      tags:
        - project
      summary: Find first instance of the model matched by filter from the data source.
      operationId: project.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/project'
      deprecated: false
  /projects/update:
    post:
      tags:
        - project
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: project.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/project'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /projects/count:
    get:
      tags:
        - project
      summary: Count instances of the model matched by where from the data source.
      operationId: project.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MockupItems:
    post:
      tags:
        - MockupItem
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MockupItem.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MockupItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
    put:
      tags:
        - MockupItem
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: MockupItem.upsert__put_MockupItems
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MockupItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
    patch:
      tags:
        - MockupItem
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: MockupItem.upsert__patch_MockupItems
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MockupItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
    get:
      tags:
        - MockupItem
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MockupItem.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MockupItem'
      deprecated: false
  /MockupItems/replaceOrCreate:
    post:
      tags:
        - MockupItem
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: MockupItem.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MockupItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
  /MockupItems/upsertWithWhere:
    post:
      tags:
        - MockupItem
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: MockupItem.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MockupItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
  '/MockupItems/{id}/exists':
    get:
      tags:
        - MockupItem
      summary: Check whether a model instance exists in the data source.
      operationId: 'MockupItem.exists__get_MockupItems_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/MockupItems/{id}':
    head:
      tags:
        - MockupItem
      summary: Check whether a model instance exists in the data source.
      operationId: 'MockupItem.exists__head_MockupItems_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MockupItem
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MockupItem.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
    delete:
      tags:
        - MockupItem
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MockupItem.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - MockupItem
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'MockupItem.prototype.updateAttributes__put_MockupItems_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MockupItem'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
    patch:
      tags:
        - MockupItem
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'MockupItem.prototype.updateAttributes__patch_MockupItems_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MockupItem'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
  '/MockupItems/{id}/replace':
    post:
      tags:
        - MockupItem
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: MockupItem.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MockupItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
  /MockupItems/findOne:
    get:
      tags:
        - MockupItem
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MockupItem.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MockupItem'
      deprecated: false
  /MockupItems/update:
    post:
      tags:
        - MockupItem
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MockupItem.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MockupItem'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /MockupItems/count:
    get:
      tags:
        - MockupItem
      summary: Count instances of the model matched by where from the data source.
      operationId: MockupItem.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date
      lastUpdated:
        type: string
        format: date
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  MockupItem:
    properties:
      id:
        type: number
        format: double
      positionX:
        type: number
        format: double
      positionY:
        type: number
        format: double
      mockupId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  Mockup:
    properties:
      id:
        type: number
        format: double
      name:
        type: string
      description:
        type: number
        format: double
      projectId:
        type: number
        format: double
    required:
      - id
      - name
    additionalProperties: false
  Project:
    properties:
      name:
        description: Name oif the project
        type: string
      description:
        description: Description of the project
        type: string
      id:
        description: This is the Id of the project
        type: number
        format: double
    required:
      - id
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: strongloop
  version: 1.0.0
  title: strongloop
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
